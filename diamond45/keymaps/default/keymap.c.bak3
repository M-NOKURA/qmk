#include QMK_KEYBOARD_H
#include <print.h>
#include "quantum.h"
#include "i2c_master.h"
#include "keymap_japanese.h"
#include "os_detection.h"

int16_t mouse_record_threshold = 30;    // ポインターの動きを一時的に記録するフレーム数。 Number of frames in which the pointer movement is temporarily recorded.
int16_t mouse_move_count_ratio = 5;     // ポインターの動きを再生する際の移動フレームの係数。 The coefficient of the moving frame when replaying the pointer movement.
int16_t mouse_record_x;
int16_t mouse_record_y;
int16_t mouse_record_count;
int16_t mouse_move_remain_count;
bool is_record_mouse;
bool is_mouse_move_x_min;
int16_t mouse_move_x_sign;
int16_t mouse_move_y_sign;
double mouse_interval_delta;
double mouse_interval_counter;

// レイヤー
enum {
    _BASE = 0, _WIN = 1, _FUNC = 2, _NUM = 3, _MOUSE = 9
};

// OLED
static unsigned int type_count = 0;
void count_type(void) { type_count++; }

// タップダンス
enum {
    TD_ESC = 0,
    TD_F2 = 1,
    TD_CAD = 2
};

// qk_tap_dance_action_t tap_dance_actions[] = { // QMK 0.19まで
tap_dance_action_t tap_dance_actions[] = { // QMK 0.21から
    [TD_ESC] = ACTION_TAP_DANCE_DOUBLE(KC_TAB, KC_ESC),
    [TD_F2] = ACTION_TAP_DANCE_DOUBLE(KC_W, KC_F2),
    [TD_CAD] = ACTION_TAP_DANCE_DOUBLE(KC_LBRC, LCA(KC_DEL))
};

// キーマップ
const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [_BASE] = LAYOUT(
      //--------------------------------------------------------------------------------------|-----------------------|--------------------------------------------------------------------------------------------------------------------//
        KC_TAB,         KC_Q,       KC_W,               KC_E,           KC_R,       KC_T,                               KC_Y,           KC_U,           KC_I,               KC_O,           KC_P,           KC_LBRC,        KC_BSPC,
        LT(2,KC_F2),    LT(2,KC_A), KC_S,               KC_D,           KC_F,       KC_G,                   KC_DEL,     KC_H,           KC_J,           KC_K,               KC_L,           KC_MINUS,               KC_ENT,
        KC_LSFT,        KC_Z,       KC_X,               KC_C,           KC_V,       KC_B,                               KC_N,           KC_M,           KC_COMM,            KC_DOT,         KC_SLSH,        KC_UP,          RSFT_T(KC_INT1),
        KC_LCTL,        KC_LALT,    KC_LGUI,            KC_ESC,         LT(3,KC_SPC),           KC_BTN1,    KC_BTN2,                    LT(3,KC_SPC),   LT(3,KC_RGUI),      KC_LBRC,        KC_LEFT,        KC_DOWN,        KC_RGHT
      //--------------------------------------------------------------------------------------|-----------------------|--------------------------------------------------------------------------------------------------------------------//
    ),
    [_WIN] = LAYOUT(
      //--------------------------------------------------------------------------------------|-----------------------|--------------------------------------------------------------------------------------------------------------------//
        KC_TRNS,        KC_TRNS,    KC_TRNS,            KC_TRNS,        KC_TRNS,    KC_TRNS,                            KC_TRNS,        KC_TRNS,        KC_TRNS,            KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,
        KC_TRNS,        KC_TRNS,    KC_TRNS,            KC_TRNS,        KC_TRNS,    KC_TRNS,                KC_TRNS,    KC_TRNS,        KC_TRNS,        KC_TRNS,            KC_TRNS,        KC_TRNS,                KC_TRNS,
        KC_TRNS,        KC_TRNS,    KC_TRNS,            KC_TRNS,        KC_TRNS,    KC_TRNS,                            KC_TRNS,        KC_TRNS,        KC_TRNS,            KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,
        KC_TRNS,        KC_LGUI,    LALT_T(JP_MHEN),    KC_TRNS,        KC_TRNS,                KC_TRNS,    KC_TRNS,                    KC_TRNS,        LT(3,JP_HENK),      KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS
      //--------------------------------------------------------------------------------------|-----------------------|--------------------------------------------------------------------------------------------------------------------//
    ),
    [_FUNC] = LAYOUT(
      //--------------------------------------------------------------------------------------|-----------------------|--------------------------------------------------------------------------------------------------------------------//
        LCTL(KC_TAB),   LCTL(KC_1), KC_F2,              KC_F4,          KC_F5,      KC_F10,                             KC_F12,         LCTL(KC_U),     KC_F7,              KC_F8,          LCTL(KC_T),     KC_TRNS,        KC_INT3,
        KC_TRNS,        KC_HOME,    KC_BSPC,            KC_DEL,         KC_END,     LSG(KC_S),              KC_TRNS,    KC_LEFT,        KC_DOWN,        KC_UP,              KC_RGHT,        KC_SCLN,                KC_QUOT,
        KC_TRNS,        KC_TRNS,    KC_TRNS,            KC_TRNS,        KC_TRNS,    KC_TRNS,                            KC_RBRC,        KC_NUHS,        LSFT(KC_RBRC),      LSFT(KC_NUHS),  LSFT(KC_SLSH),  LCTL(KC_HOME),  KC_INT1,
        KC_TRNS,        KC_TRNS,    KC_TRNS,            KC_TRNS,        KC_TRNS,                KC_WH_D,    KC_WH_U,                    KC_TRNS,        KC_TRNS,            KC_TRNS,        LCTL(KC_PGUP),  LCTL(KC_END),   LCTL(KC_PGDN)
      //--------------------------------------------------------------------------------------|-----------------------|--------------------------------------------------------------------------------------------------------------------//
    ),
    [_NUM] = LAYOUT(
      //--------------------------------------------------------------------------------------|-----------------------|--------------------------------------------------------------------------------------------------------------------//
        LCA(KC_DEL),    LSFT(KC_1), LSFT(KC_2),         LSFT(KC_3),     LSFT(KC_4), LSFT(KC_5),                         LSFT(KC_6),     LSFT(KC_7),     LSFT(KC_8),         LSFT(KC_9),     LSFT(KC_0),     KC_EQL,         KC_INT3,
        KC_DOT,         KC_1,       KC_2,               KC_3,           KC_4,       KC_5,                   KC_TRNS,    KC_6,           KC_7,           KC_8,               KC_9,           KC_0,                   KC_QUOT,
        KC_TRNS,        DF(0),      DF(1),              XXXXXXX,        XXXXXXX,    XXXXXXX,                            LSFT(KC_MINS),  LSFT(KC_SCLN),  KC_MINUS,           LSFT(KC_QUOT),  KC_SLSH,        KC_VOLU,        XXXXXXX,
        QK_BOOT,        KC_TRNS,    KC_TRNS,            LCA(KC_DEL),    KC_TRNS,                KC_TRNS,    KC_TRNS,                    KC_TRNS,        KC_TRNS,            KC_TRNS,        KC_TRNS,        KC_VOLD,        KC_TRNS
      //--------------------------------------------------------------------------------------|-----------------------|--------------------------------------------------------------------------------------------------------------------//
    ),
    [_MOUSE] = LAYOUT(
      //--------------------------------------------------------------------------------------|-----------------------|--------------------------------------------------------------------------------------------------------------------//
        KC_TRNS,        KC_TRNS,    KC_TRNS,            KC_TRNS,        KC_TRNS,    KC_TRNS,                            KC_TRNS,        KC_TRNS,        KC_TRNS,            KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,
        KC_TRNS,        KC_TRNS,    KC_TRNS,            KC_TRNS,        KC_TRNS,    KC_TRNS,                KC_TRNS,    KC_TRNS,        KC_TRNS,        KC_TRNS,            KC_TRNS,        KC_TRNS,                KC_TRNS,
        KC_TRNS,        KC_TRNS,    KC_TRNS,            KC_TRNS,        KC_TRNS,    KC_TRNS,                            KC_TRNS,        KC_TRNS,        KC_TRNS,            KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS,
        KC_TRNS,        KC_TRNS,    KC_TRNS,            KC_TRNS,        KC_TRNS,                KC_TRNS,    KC_TRNS,                    KC_TRNS,        KC_TRNS,            KC_TRNS,        KC_TRNS,        KC_TRNS,        KC_TRNS
      //--------------------------------------------------------------------------------------|-----------------------|--------------------------------------------------------------------------------------------------------------------//
    )
};

// -----------------------------------------------------------------------------
// 起動後処理
// -----------------------------------------------------------------------------
void keyboard_post_init_user(void) {
#ifdef CONSOLE_ENABLE
    // debug_enable=true;
    // debug_matrix=true;
    // debug_keyboard=true;
    // debug_mouse=true;
#endif

#ifdef OS_DETECTION_ENABLE
    wait_ms(500);
    switch (detected_host_os()) {
        case OS_WINDOWS:
            layer_off(_BASE);
            layer_on(_WIN);
            break;
        // case OS_MACOS:
        //     layer_off(_WIN);
        //     layer_on(_BASE);
        //     break;
        default:
            break;
    }
#endif
}

// -----------------------------------------------------------------------------
// キー入力時関数
// -----------------------------------------------------------------------------
bool process_record_user(uint16_t keycode, keyrecord_t *record) {
#ifdef CONSOLE_ENABLE
    dprintf("keycode: %u, col: %u, row: %u, pressed: %u\n", keycode, record->event.key.col, record->event.key.row, record->event.pressed);
#endif

#ifdef OLED_ENABLE
    if (record->event.pressed) count_type();
#endif

    switch (keycode) {
        case DF(0):
            layer_off(_WIN);
            layer_on(_BASE);
            break;
        case DF(1):
            layer_off(_BASE);
            layer_on(_WIN);
            break;
        default:
            break;
    }

    return true;
}

// -----------------------------------------------------------------------------
// マウス(トラックボール)初期化
// -----------------------------------------------------------------------------
void i2c_init_user(void) { }

void pointint_device_init_kb(void) {
    // AZ1UBALL加速度設定
    uint8_t addr=0x0a;
    uint8_t data[]={0x90, 0x00};    // AZ1UBALL normal speed mode
    // uint8_t data[]={0x91, 0x00};      // AZ1UBALL accellaration mode
    uint16_t timeout=100;             // in milli-seconds
    i2c_status_t status;
    status = i2c_transmit (addr, data, 1, timeout);
    if (status != 0) return;
}

// Automatic Mouse Layer after QMK 0.18
// void pointing_device_init_user(void) {
//     set_auto_mouse_layer(9);
//     set_auto_mouse_enable(true);
// }

// -----------------------------------------------------------------------------
// マウス(トラックボール)用 独自関数
// -----------------------------------------------------------------------------
// 自前の絶対数を返す関数
int16_t my_abs(int16_t num) { if (num < 0) num = -num; return num; }
// 自前の符号を返す関数
int16_t mmouse_move_y_sign(int16_t num) { if (num < 0) return -1; return 1; }

// -----------------------------------------------------------------------------
// マウス(トラックボール)操作時関数
// -----------------------------------------------------------------------------
report_mouse_t pointing_device_task_user(report_mouse_t mouse_report) {
    // レイヤーによって、通常カーソルとスクロールを切り替える
    // Funcレイヤはスクロール動作
    if(layer_state_is(_FUNC)){
        mouse_report.h = mouse_report.x / 3;
        mouse_report.v = mouse_report.y * (-1);
        mouse_report.x = 0;
        mouse_report.y = 0;
    }
    // その他のレイヤはカーソル動作
    else {
        if (!is_record_mouse) {
            if (mouse_report.x != 0 || mouse_report.y != 0) {
                is_record_mouse = true;
                mouse_record_x = 0;
                mouse_record_y = 0;
                mouse_record_count = 0;
            }
        }

        if (is_record_mouse) {
            mouse_record_x += mouse_report.x;
            mouse_record_y += mouse_report.y;
            mouse_record_count++;

            if (mouse_record_count >= mouse_record_threshold) {
                mouse_interval_counter = 0;
                int16_t absX = my_abs(mouse_record_x);
                int16_t absY = my_abs(mouse_record_y);
                is_mouse_move_x_min = absX < absY;
                mouse_move_remain_count = absY + absX;
                mouse_move_remain_count *= mouse_move_count_ratio;
                mouse_move_x_sign = mmouse_move_y_sign(mouse_record_x);
                mouse_move_y_sign = mmouse_move_y_sign(mouse_record_y);

                if (is_mouse_move_x_min) {
                    if (mouse_record_x == 0) {
                        mouse_interval_delta = 0;
                    }
                    else {
                        mouse_interval_delta = (double)absX / (double)absY;
                    }
                }
                else {
                    if (mouse_record_y == 0) {
                        mouse_interval_delta = 0;
                    }
                    else {
                        mouse_interval_delta = (double)absY / (double)absX;
                    }
                }

                is_record_mouse = false;
                mouse_record_count = 0;
            }
        }

        if (mouse_move_remain_count > 0) {
            mouse_interval_counter += mouse_interval_delta;
            bool can_move_min = mouse_interval_counter >= 1;

            if (can_move_min) mouse_interval_counter -= 1;
            if (is_mouse_move_x_min) {
                mouse_report.y = mouse_move_y_sign;
                if (can_move_min) mouse_report.x = mouse_move_x_sign;
            }
            else {
                mouse_report.x = mouse_move_x_sign;
                if (can_move_min) mouse_report.y = mouse_move_y_sign;
            }
            mouse_report.x *= 1 + mouse_move_remain_count / 10;
            mouse_report.y *= 1 + mouse_move_remain_count / 10;
            mouse_move_remain_count--;
        }
        else {
            mouse_report.x = 0;
            mouse_report.y = 0;
        }
    }

    return mouse_report;
}

// -----------------------------------------------------------------------------
// OLED表示初期化
// -----------------------------------------------------------------------------
oled_rotation_t oled_init_kb(oled_rotation_t rotation) { return OLED_ROTATION_270; } // 縦表示

// -----------------------------------------------------------------------------
// OLED用 独自関数
// -----------------------------------------------------------------------------
void oled_write_2digit(unsigned int digit) {
    static char buf[6];
    itoa(digit, buf, 10);
    if (digit < 10) oled_write_char('0', false);
    oled_write(buf, false);
}

void oled_write_uptime(void) {
    static uint32_t uptime_s;
    uptime_s = timer_read32() / 1000;
    oled_write_P(PSTR("UPT"), false);
    oled_write_char('\n', false);

    oled_write_2digit((uptime_s / 3600) % 60); // Hour
    oled_write_char(':', false);

    oled_write_2digit((uptime_s / 60) % 60); // Minutes
    oled_write_char('\n', false);
}

void oled_write_type_count(void) {
    static char type_count_str[7];
    oled_write_P(PSTR("KEY"), false);
    oled_write_char('\n', false);

    itoa(type_count, type_count_str, 10);
    oled_write_ln(type_count_str, false);
    // oled_write_char('\n', false);
}

static void render_logo(void) {
    static const char PROGMEM qmk_logo[] = {
        0x80, 0x81, 0x82, 0x83, 0x84,
        0xA0, 0xA1, 0xA2, 0xA3, 0xA4,
        0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0x00
    };
    oled_write_P(qmk_logo, false);
}

// -----------------------------------------------------------------------------
// OLED表示
// -----------------------------------------------------------------------------
bool oled_task_user(void) {
    render_logo();
    oled_write_P(PSTR("\nQMK\n0.21\n"), false);

    switch (detected_host_os()) {
        case OS_UNSURE:
            oled_write_P(PSTR("UNSUR\n"), false);
            break;
        case OS_LINUX:
            oled_write_P(PSTR("LINUX\n"), false);
            break;
        case OS_WINDOWS:
            oled_write_P(PSTR("WIN\n\n"), false);
            break;
        case OS_MACOS:
            oled_write_P(PSTR("MAC\n\n"), false);
            break;
        case OS_IOS:
            oled_write_P(PSTR("IOS\n\n"), false);
            break;
        default:
            oled_write_P(PSTR("UNKOW\n"), false);
    }

    oled_write_P(PSTR("LAYER"), false);
    switch (get_highest_layer(layer_state)) {
        case _BASE:
            oled_write_P(PSTR("BASE\n\n"), false);
            break;
        case _WIN:
            oled_write_P(PSTR("WIN\n\n"), false);
            break;
        case _FUNC:
            oled_write_P(PSTR("FUNC\n\n"), false);
            break;
        case _NUM:
            oled_write_P(PSTR("NUM\n\n"), false);
            break;
        case _MOUSE:
            oled_write_P(PSTR("MOUSE\n"), false);
            break;
        default:
            oled_write_ln_P(PSTR("UNDEF\n"), false);
    }

    oled_write_uptime();
    oled_write_type_count();

    return false;
}

// -----------------------------------------------------------------------------
// コンボキー(レイヤーによって切り替え)
// -----------------------------------------------------------------------------
enum combo_events {
    MSCOMBO4,
    CTLALTDELCOMBO,
};

const uint16_t PROGMEM mscombo4[] = {KC_BTN1, KC_BTN2, COMBO_END};
const uint16_t PROGMEM ctlaltdelcombo[] = {KC_LCTL, KC_LALT, KC_BSPC, COMBO_END};

combo_t key_combos[] = {
    // COMBO(mscombo4, KC_BTN4),
    // COMBO(mscombo4, LGUI(KC_LEFT)),
    [MSCOMBO4] = COMBO_ACTION(mscombo4),
    [CTLALTDELCOMBO] = COMBO_ACTION(ctlaltdelcombo),
};

void process_combo_event(uint16_t combo_index, bool pressed) {
    switch(combo_index) {
        case MSCOMBO4:
            if (pressed) {
                if(layer_state_is(_BASE)){
                    tap_code16(LGUI(KC_LEFT));
                }
                else{
                    tap_code16(LALT(KC_LEFT));
                }
            }
            break;
        case CTLALTDELCOMBO:
            if (pressed) {
                if(layer_state_is(_WIN)){
                    tap_code16(LCA(KC_DEL));
                }
            }
            break;
    }
}